
//Perform Synthesis Steps for All Nodes with a "name" property_name


          //Code below creates syntheticElements that match the name of each node with the name property key
          //For application to other node labels, only the first match operation needs to be changed
          MATCH (smdl_nodes:SYNTHESIS_FLAG:SUAS_GRA)
          WHERE 'name' IN keys(smdl_nodes)

          //Section below retrieves matching wikidata items based on rdfs:label
          //Returned items are added to the GBDR as a syntheticElement node (root synthetic node)
          //A relationship between the created between syntheticElement node and SMDL node
          WITH "SELECT ?subject ?subjectName ?subjectDescription WHERE { ?subject rdfs:label \"" +
          toLower(smdl_nodes.name) + "\"@en . ?subject schema:description ?subjectDescription filter(lang(?subjectDescription) = \"en\"). ?subject rdfs:label ?subjectName filter(lang(?subjectName) = \"en\").}" AS sparql, smdl_nodes
          CALL apoc.load.jsonParams(
            "http://query.wikidata.org/sparql?query=" + sparql,
            { Accept: "application/sparql-results+json",failOnError:false},
            null) YIELD value
          WITH value, smdl_nodes
          CALL apoc.do.when(
            size(value.results.bindings) > 0,
            '
            UNWIND value.results.bindings AS result
            WITH result, smdl_nodes
             MERGE (synEle:syntheticElement {name:result.subjectName.value, globalId:result.subject.value, description:result.subjectDescription.value})
             MERGE (smdl_nodes)-[:SYNTHETIC_DEFINED_BY {Synthetic:"TRUE"}]->(synEle)
             RETURN smdl_nodes',
             'SET smdl_nodes.SYNTH_DATA_IMPORT = true RETURN smdl_nodes',
            {value: value, smdl_nodes: smdl_nodes})
          YIELD value AS result
          WITH smdl_nodes
          //Query wikidata for the value of "said to be the same as" (P460) for root synthetic node
          MATCH (smdl_nodes)-[:SYNTHETIC_DEFINED_BY]->(synthEle)
          WITH DISTINCT synthEle as synthSet
          WITH "SELECT ?sameAsId ?sameAsName ?sameAsDescription WHERE { <" +
          synthSet.globalId + "> wdt:P460 ?sameAsId . ?sameAsId schema:description ?sameAsDescription filter(lang(?sameAsDescription) = \"en\").  ?sameAsId rdfs:label ?sameAsName filter(lang(?sameAsName) = \"en\").}" AS sparql, synthSet
          CALL apoc.load.jsonParams(
            "http://query.wikidata.org/sparql?query=" + sparql,
            { Accept: "application/sparql-results+json",failOnError:false},
            null)
          YIELD value
          CALL apoc.do.when(
            size(value.results.bindings) > 0,
            '
            UNWIND value.results.bindings AS result
            WITH result, synthSet
            MERGE (synEle:syntheticElement {name:result.sameAsName.value, globalId:result.sameAsId.value, description:result.sameAsDescription.value})
            MERGE (synthSet)-[:SYNTHETIC_SAME_AS {Synthetic:"TRUE"}]-(synEle)
            RETURN synthSet','SET synthSet.SYNTH_DATA_IMPORT = true RETURN synthSet',
            {value: value, synthSet : synthSet})
          YIELD value AS result

          //Query wikidata for the value of "synonym" (P5973) for root synthetic node
          WITH synthSet
          WITH "SELECT ?synonymOfId ?synonymOfName ?synonymOfDescription WHERE { <" +
          synthSet.globalId + "> wdt:P5973 ?synonymOfId . ?synonymOfId schema:description ?synonymOfDescription filter(lang(?synonymOfDescription) = \"en\").  ?synonymOfId rdfs:label ?synonymOfName filter(lang(?synonymOfName) = \"en\").}" AS sparql, synthSet
          CALL apoc.load.jsonParams(
            "http://query.wikidata.org/sparql?query=" + sparql,
            { Accept: "application/sparql-results+json",failOnError:false},
            null)
          YIELD value
          CALL apoc.do.when(
            size(value.results.bindings) > 0,
            '
            UNWIND value.results.bindings AS result
            WITH result, synthSet WHERE result is not null
            MERGE (synEle:syntheticElement {name:result.synonymOfName.value, globalId:result.synonymOfId.value, description:result.synonymOfDescription.value})
            MERGE (synthSet)-[:SYNTHETIC_SYNONYM_OF {Synthetic:"TRUE"}]-(synEle)
            RETURN synthSet','SET synthSet.SYNTH_DATA_IMPORT = true RETURN synthSet',
            {value: value, synthSet : synthSet})
          YIELD value AS result

          //Query wikidata for the value of "instance of" (P31) for root synthetic node
          WITH synthSet
          WITH "SELECT ?instanceOfId ?instanceOfName ?instanceOfDescription WHERE { <" +
          synthSet.globalId + "> wdt:P31 ?instanceOfId . ?instanceOfId schema:description ?instanceOfDescription filter(lang(?instanceOfDescription) = \"en\").  ?instanceOfId rdfs:label ?instanceOfName filter(lang(?instanceOfName) = \"en\").}" AS sparql, synthSet
          CALL apoc.load.jsonParams(
            "http://query.wikidata.org/sparql?query=" + sparql,
            { Accept: "application/sparql-results+json",failOnError:false},
            null)
          YIELD value
          CALL apoc.do.when(
            size(value.results.bindings) > 0,
            '
            UNWIND value.results.bindings AS result
            WITH result, synthSet WHERE result is not null
            MERGE (synEle:syntheticElement {name:result.instanceOfName.value, globalId:result.instanceOfId.value, description:result.instanceOfDescription.value})
            MERGE (synthSet)-[:SYNTHETIC_INSTANCE_OF {Synthetic:"TRUE"}]-(synEle)
            RETURN synthSet','SET synthSet.SYNTH_DATA_IMPORT = true RETURN synthSet',
            {value: value, synthSet : synthSet})
          YIELD value AS result

          //Query wikidata for the value of "exact match" (P2888) for root synthetic node
          WITH synthSet
          WITH "SELECT ?exactMatchId ?exactMatchName ?exactMatchDescription WHERE { <" +
          synthSet.globalId + "> wdt:P31 ?exactMatchId . ?exactMatchId schema:description ?exactMatchDescription filter(lang(?exactMatchDescription) = \"en\").  ?exactMatchId rdfs:label ?exactMatchName filter(lang(?exactMatchName) = \"en\").}" AS sparql, synthSet
          CALL apoc.load.jsonParams(
            "http://query.wikidata.org/sparql?query=" + sparql,
            {Accept: "application/sparql-results+json",failOnError:false},
            null)
          YIELD value
          CALL apoc.do.when(
            size(value.results.bindings) > 0,
            '
            UNWIND value.results.bindings AS result
            WITH result, synthSet WHERE result is not null
            MERGE (synEle:syntheticElement {name:result.exactMatchName.value, globalId:result.exactMatchId.value, description:result.exactMatchDescription.value})
            MERGE (synthSet)-[:SYNTHETIC_EXACT_MATCH {Synthetic:"TRUE"}]-(synEle)
            RETURN synthSet','SET synthSet.SYNTH_DATA_IMPORT = true RETURN synthSet',
            {value: value, synthSet : synthSet})
          YIELD value AS result

          //Query wikidata for the superclass of all existing syntheticElements connected
          //to the root synthetic node
          MATCH (smdl_nodes)-[:SYNTHETIC_DEFINED_BY ]->()-[*0..1]->(synthEle)
          WITH DISTINCT synthEle as synthSet
          WITH "SELECT ?superClassId ?superClassName ?superClassDescription WHERE { <" +
          synthSet.globalId + "> wdt:P279 ?superClassId . ?superClassId schema:description ?superClassDescription filter(lang(?superClassDescription) = \"en\").  ?superClassId rdfs:label ?superClassName filter(lang(?superClassName) = \"en\").}" AS sparql, synthSet
          CALL apoc.load.jsonParams(
            "http://query.wikidata.org/sparql?query=" + sparql,
            { Accept: "application/sparql-results+json", failOnError:false},
            null)
          YIELD value

          CALL apoc.do.when(
            size(value.results.bindings) > 0,
            '
            UNWIND value.results.bindings AS result
            WITH result, synthSet WHERE result is not null
            MERGE (synEle:syntheticElement {name:result.superClassName.value, globalId:result.superClassId.value, description:result.superClassDescription.value})
            MERGE (synthSet)-[:SYNTHETIC_SUBCLASS_OF {Synthetic:"TRUE"}]-(synEle)
            RETURN synthSet','SET synthSet.SYNTH_DATA_IMPORT = true RETURN synthSet',
            {value: value, synthSet : synthSet})
          YIELD value AS result
          RETURN "done";

//Identify Potentially Equivalent Nodes
MATCH p=(smA:System_Model)<-[:IS_CHILD_OF*1..]-(a)-[*0..5{Synthetic:'TRUE'}]-(b)-[:IS_CHILD_OF*1..]->(smB:System_Model)
WHERE smA<>smB
AND NOT a:syntheticElement
AND NOT b:syntheticElement
AND id(a)>id(b) //Avoids two pairs of (a,b) and (b,a)
WITH DISTINCT a,b
MERGE (a)-[:POTENTIAL_MATCH]-(b);

//Node Similarity Algorithms

//Calculate node similarity score as Jaccardian similarity of property keys
//Retrieve all pairs of potentially matched nodes
MATCH (nodeA)-[r:POTENTIAL_MATCH]->(nodeB)
//Determine cardinality of property key intersection
CALL{
    WITH nodeA,nodeB
    WITH nodeA as a, nodeB as b
    WITH keys(a) AS a_prop_keys, keys(b) AS b_prop_keys
    UNWIND a_prop_keys as a_list
    UNWIND b_prop_keys as b_list
    //Strip everything except alphanumeric characters and convert to lower case.
    WITH apoc.text.clean(a_list) as clean_a, apoc.text.clean(b_list) as clean_b
    //Determine if pairs are fuzzy match and calculate edit distance
    WITH clean_a, clean_b, apoc.text.fuzzyMatch(clean_a,clean_b) as fuzzyMatch, apoc.text.levenshteinDistance(clean_a,clean_b) AS pair_lev_dist
    //Count as intersect if a fuzzy match or edit distance < 2
    WITH DISTINCT clean_a, (fuzzyMatch=true OR pair_lev_dist<2) AS prop_match WHERE prop_match=TRUE
    RETURN count(prop_match) AS intersectCount }

//Determine cardinality of the union of properties
WITH r,intersectCount, (size(keys(nodeA)) + size(keys(nodeB)) - intersectCount) as unionCount
//Calculate Jaccardian similarity and set POSSIBLE_MATCH rel property accordingly
//Intersect and union counts reduced by one to account for .name property
//Using *10^3 in numerator and denominator changes the default calculation from integer to float
WITH r, ((intersectCount-1)*10^3)/((unionCount-1)*10^3) AS jaccardSimilarity
SET r.nodeSimilarity = jaccardSimilarity;



//Calculate Context Similarity Score
MATCH (nodeA)-[r:POTENTIAL_MATCH]->(nodeB)
//Get combined count of neighbors.  Last number in relationship length determines neighborhood radius
CALL{
    WITH nodeA, nodeB
    WITH nodeA as a, nodeB as b
    OPTIONAL MATCH (a)-[*1..2{GBDR_level:"SMDL"}]-(aNeighbors)
    WITH (b),count(DISTINCT aNeighbors) AS aNeighbors
    OPTIONAL MATCH (b)-[*1..2{GBDR_level:"SMDL"}]-(bNeighbors)
    WITH aNeighbors, count(DISTINCT bNeighbors) as bNeighbors
    RETURN (aNeighbors + bNeighbors) AS neighbor_count
}

//Get count of neighbors with a match in the other system
CALL{
    WITH nodeA, nodeB
    WITH nodeA as a, nodeB as b
    OPTIONAL MATCH (a)-[*1..2{GBDR_level:"SMDL"}]-(aNeighbors)
    OPTIONAL MATCH (b)-[*1..2{GBDR_level:"SMDL"}]-(bNeighbors)
    MATCH(aNeighbors)-[:POTENTIAL_MATCH]-(bNeighbors) WHERE aNeighbors <> a AND bNeighbors <> b
    RETURN count(DISTINCT aNeighbors) + count(DISTINCT bNeighbors) AS match_count
}

//Calculate cumulative value for binomial distribution n = neighbor count, k = match count
//p is a tuning parameter that can be used to adjust context scores to reflect consistency
//of language across all system models, and coverage of the semantic framework

CALL
{
    WITH neighbor_count, match_count
    WITH neighbor_count as n, match_count as k

    //Calculating Binomial CDF in Cypher
    MERGE (binom:GBDR_TEMP {k:k,n:n,p:.5}) //k,n,p params
    WITH binom
    SET binom.value = (1-binom.p)^(binom.n)
    SET binom.coeff_value=1
    FOREACH(i IN range(1,binom.k) |
        SET binom.coeff_value=1
        FOREACH(j IN range(1,i) |
            SET binom.coeff_value = binom.coeff_value * ((binom.n + 1 - j)/j))
        SET binom.value = binom.value + binom.coeff_value * binom.p^i * (1-binom.p)^(binom.n-i)
    )
    WITH binom, binom.value AS a
    DELETE binom
    RETURN a AS cdf_value
}
SET r.contextSimilarity = cdf_value;
